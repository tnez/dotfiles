" Leader
let mapleader = " "

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autoread      " Re-read buffers when they change on disk
set autowrite     " Automatically :write before running commands
set title         " Set title so that i3-vim-nav works as expected

" Use system clipboard by default
set clipboard=unnamed

set shell=/bin/bash

" Exclude files from Ctrl-P and other indexing/checking/etc
set wildignore+=node_modules

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Vim-Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source '~/.vimrc'
endif

if &compatible
  set nocompatible
end

call plug#begin('~/.vim/plugged')

" System
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

" General
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'jwilm/i3-vim-focus'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-speeddating'
Plug 'easymotion/vim-easymotion'
Plug 'qpkorr/vim-bufkill'

" Looks
Plug 'danielwe/base16-vim'
Plug 'junegunn/goyo.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Git
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" All language
Plug 'sheerun/vim-polyglot'

" Javascript
Plug 'leshill/vim-json'
Plug 'mxw/vim-jsx'
Plug 'prettier/vim-prettier'

" LookML
Plug 'thalesmello/lkml.vim'

" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" Org
Plug 'jceb/vim-orgmode'

" Ruby
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'vim-ruby/vim-ruby'

" Web (General)
Plug 'mattn/emmet-vim'

" Testing / Linting
Plug 'janko-m/vim-test'
Plug 'w0rp/ale'

" Autocomplete + Snippets
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'SirVer/ultisnips'

call plug#end()

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

filetype plugin indent on

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.md,gitcommit setlocal spell
  autocmd FileType gitcommit setlocal textwidth=0
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
  autocmd BufRead,BufNewFile aliases.local,zshrc.local,*/zsh/configs/* set filetype=sh
  autocmd BufRead,BufNewFile gitconfig.local set filetype=gitconfig
  autocmd BufRead,BufNewFile tmux.conf.local set filetype=tmux
  autocmd BufRead,BufNewFile vimrc.local,*/vim/config set filetype=vim
  autocmd BufRead,BufNewFile Dockerfile* set filetype=dockerfile
augroup END

" ALE linting events
augroup ale
  autocmd!

  set updatetime=1000
  let g:ale_echo_cursor = 0
  let g:ale_lint_on_text_changed = 0
  let g:airline#extensions#ale#enabled = 1
  let g:ale_set_highlights = 0
augroup END

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Use one space, not two, after punctuation.
set nojoinspaces

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag --literal --files-with-matches --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Numbers
set number
set numberwidth=5

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Git mappings
nnoremap <silent> <Leader>gd :Gdiff<CR>
nnoremap <silent> <Leader>gD :Gdiff HEAD<CR>
nnoremap <silent> <Leader>gf :Gfetch --prune<CR>
nnoremap <silent> <Leader>gl :Glog<CR>
nnoremap <silent> <Leader>gp :Gpush<CR>
nnoremap <silent> <Leader>gP :Gpush --force-with-lease<CR>
nnoremap <silent> <Leader>gs :Gstatus<CR>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Split navigation that works with i3 by using
" https://github.com/jwilm/i3-vim-focus
nnoremap gwl :call Focus('right', 'l')<CR>
nnoremap gwh :call Focus('left', 'h')<CR>
nnoremap gwk :call Focus('up', 'k')<CR>
nnoremap gwj :call Focus('down', 'j')<CR>

" Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

" Keybindings
nnoremap <Space> <Nop>
inoremap kj <esc>

" Intellisense
"
" Use <c-j> and <c-k> to navigate completion options
inoremap <silent><expr> <C-j>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<C-j>" :
  \ coc#referesh()
inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction

" Use <cr> to confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` to naviagate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-defintion)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Snippets
"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.config/tnez-snippets']
let g:UltiSnipsEditSplit="context"
nmap <leader>x :UltiSnipsEdit<CR>

" Javascript
let g:javascript_plugin_flow = 1
let g:jsx_ext_required = 0

" Web General
let g:user_emmet_leader_key='<Tab>'
let g:user_emmet_settings = {
\ 'javascript.jsx': { 'extends': 'jsx' }
\}

" Markdown
let g:vim_markdown_folding_disabled = 1

" Set color theme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" File / Buffer navigation
nnoremap <leader>fs :w<CR>
nnoremap <leader>fo :CtrlP<CR>
nnoremap <leader>bd :BD<CR>
nnoremap <leader>q :BD<CR>
nnoremap <leader><TAB> :BB<CR>
nnoremap <leader><S-TAB> :BF<CR>
nnoremap <leader>bb :CtrlPBuffer<CR>
nnoremap <leader>t :CtrlPTag<CR>
nnoremap <leader>Q :q<CR>
nnoremap <leader>wd :close<CR>

" NERDTree
map <leader>ad :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:NERDTreeIgnore=['node_modules']

" Status Line
if !has('gui_running')
  set t_Co=256
endif
let g:airline_theme = 'base16'
let g:airline_left_sep = "\uE0B0"
let g:airline_right_sep = "\uE0B2"
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = "\uE0B0"

" Check to see if buffers have changed on disk
au FocusGained,BufEnter * :checktime
