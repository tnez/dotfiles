" Leader
let mapleader = " "

set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=50
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autoread      " Re-read buffers when they change on disk
set autowrite     " Automatically :write before running commands
set title         " Set title so that i3-vim-nav works as expected
set encoding=UTF-8
set nowrap
execute "set titleold=".hostname()

" Use system clipboard by default
set clipboard=unnamedplus

set shell=/bin/bash

" Exclude files from Ctrl-P and other indexing/checking/etc
set wildignore+=node_modules

" Use relative line numbers (with actual line number on current)
set number
set relativenumber

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

" Vim-Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source '~/.vimrc'
endif

if &compatible
  set nocompatible
end

call plug#begin('~/.vim/plugged')

" System
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

" General
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'airblade/vim-gitgutter'
Plug 'termhn/i3-vim-nav'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-speeddating'
Plug 'easymotion/vim-easymotion'
Plug 'qpkorr/vim-bufkill'
Plug 'liuchengxu/vim-which-key'
Plug 'voldikss/vim-floaterm'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'
Plug 'justinmk/vim-sneak'

" Git
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" All language
Plug 'sheerun/vim-polyglot'

" Javascript
Plug 'leshill/vim-json'
Plug 'mxw/vim-jsx'

" LookML
Plug 'thalesmello/lkml.vim'

" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }

" Org
Plug 'jceb/vim-orgmode'

" Ruby
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'vim-ruby/vim-ruby'

" Web (General)
Plug 'mattn/emmet-vim'

" Autocomplete + Snippets
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'honza/vim-snippets'

" Looks
Plug 'dylanaraps/wal.vim'
Plug 'junegunn/goyo.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" load this last
Plug 'ryanoasis/vim-devicons'

call plug#end()

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

filetype plugin indent on

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md,gitcommit,*/qutebrowser-editor-* set filetype=markdown
  autocmd BufRead,BufNewFile *.md,gitcommit,*/qutebrowser-editor-* setlocal textwidth=0
  autocmd BufRead,BufNewFile *.md,gitcommit,*/qutebrowser-editor-* setlocal spell
  autocmd FileType gitcommit,*/qutebrowser-editor-* setlocal textwidth=0
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
  autocmd BufRead,BufNewFile aliases.local,zshrc.local,*/zsh/configs/* set filetype=sh
  autocmd BufRead,BufNewFile gitconfig.local set filetype=gitconfig
  autocmd BufRead,BufNewFile tmux.conf.local set filetype=tmux
  autocmd BufRead,BufNewFile vimrc.local,*/vim/config set filetype=vim
  autocmd BufRead,BufNewFile Dockerfile* set filetype=dockerfile
augroup END

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Use one space, not two, after punctuation.
set nojoinspaces

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Numbers
set number
set numberwidth=5

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Git mappings
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gl :FloatermNew --height=0.8 --width=0.8 tig<CR>
nnoremap <Leader>gs :FloatermNew --height=0.8 --width=0.8 lazygit<CR>
nnoremap <Leader>gS :FloatermNew --height=0.8 --width=0.8 hub sync<CR>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Split navigation that works with i3 by using
" https://github.com/termhn/i3-vim-nav
nnoremap <silent> <c-right> :call Focus('right', 'l')<CR>
nnoremap <silent> <c-left> :call Focus('left', 'h')<CR>
nnoremap <silent> <c-up> :call Focus('up', 'k')<CR>
nnoremap <silent> <c-down> :call Focus('down', 'j')<CR>

" Move between linting errors
nnoremap ]r :ALENextWrap<CR>
nnoremap [r :ALEPreviousWrap<CR>

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

" Keybindings
nnoremap <Space> <Nop>
inoremap kj <esc>

" Snippets
"
imap <C-;> <Plug>(coc-snippets-expand)
vmap <TAB> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'
imap <TAB> <Plug>(coc-snippets-expand-jump)
nmap <leader>se :CocCommand snippets.editSnippets<CR>

" Javascript
let g:javascript_plugin_flow = 1
let g:jsx_ext_required = 0

" Web General
let g:user_emmet_leader_key='<C-y>'
let g:user_emmet_settings = {
\ 'javascript.jsx': { 'extends': 'jsx' }
\}

" Markdown
let g:vim_markdown_folding_disabled = 1
nmap <leader>mm <Plug>MarkdownPreviewToggle

" Set color theme
colorscheme wal

" Font stuff
highlight Comment cterm=italic
highlight htmlArg cterm=italic
highlight Type cterm=italic

" Motion
let g:sneak#label = 1

" fzf
nnoremap <C-o> :Files<CR>
nnoremap <C-t> :Buffers<CR>
nnoremap <C-s> :Rg<CR>

let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
let $FZF_DEFAULT_COMMAND="rg --files --hidden"

let g:fzf_action = {
\ 'ctrl-t': 'tab split',
\ 'ctrl-h': 'split',
\ 'ctrl-v': 'vsplit'
\}
let g:fzf_layout = { 'down': '80%' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" File / Buffer navigation
nnoremap <leader>fs :w<CR>
nnoremap <leader>bd :BD<CR>
nnoremap <leader>q :BD<CR>
nnoremap <leader><TAB> :BB<CR>
nnoremap <leader><S-TAB> :BF<CR>
nnoremap <leader>Q :q<CR>
nnoremap <leader>wd :close<CR>

" File Explorer
nnoremap <leader>el :CocCommand explorer<CR>
nnoremap <leader>ef :CocCommand explorer --preset floating<CR>

" Floaterm
let g:floaterm_shell = '/usr/bin/fish'
let g:floaterm_autoclose = 1
nnoremap <leader>tt :FloatermNew<CR>
nnoremap <leader>tn :FloatermNew node<CR>
nnoremap <leader>tr :FloatermNew R<CR>

" vim-which-key
" TODO: need to define a key map to make results more readable, see:
" https://github.com/liuchengxu/vim-which-key#miminal-configuration
set timeoutlen=500
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey ','<CR>

" CoC (Code Completion and IDE Fanciness)
inoremap <silent><expr> <c-space> coc#refresh()
vmap <leader>a <Plug>coc-codeaction-selected)
nmap <leader>a <Plug>coc-codeaction-selected)
nmap <silent> gd <Plug>(coc-defintion)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gy <Plug>(coc-type-defintion)

nnoremap <silent> K :call <SID>show_documentation()<CR>
nnoremap <silent> gh :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

nnoremap <silent> <leader>cR :<C-u>CocRestart<CR>
nnoremap <silent> <leader>cc :<C-u>CocList commands<CR>
nnoremap <silent> <leader>cl :<C-u>CocList locationlist<CR>
nnoremap <silent> <leader>co :<C-u>CocList outline<CR>
nnoremap <silent> <leader>cs :<C-u>CocList -I symbols<CR>
nnoremap <silent> <leader>cx :<C-u>CocList extensions<CR>

nmap <leader>cr <Plug>(coc-rename)
nmap <leader>cf <Plug>(coc-format-selected)
vmap <leader>cf <Plug>(coc-format-selected)

nmap <leader>ca <Plug>(coc-codeaction-selected)
vmap <leader>ca <Plug>(coc-codeaction-selected)

" Status Line
if !has('gui_running')
  set t_Co=256
endif
let g:airline_theme = 'base16'
let g:airline_left_sep = "\uE0B0"
let g:airline_right_sep = "\uE0B2"
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = "\uE0B0"

" Check to see if buffers have changed on disk
au FocusGained,BufEnter * :checktime
